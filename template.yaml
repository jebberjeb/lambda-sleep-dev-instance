AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31

Resources:
  MachineStateLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: MachineStateLambda
      Handler: "com.jebbeich.machinestatelambda::handler"
      Runtime: java8
      MemorySize: 320
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
  NotifyLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NotifyLambda
      Handler: "com.jebbeich.notifylambda::handler"
      Runtime: java8
      MemorySize: 320
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
  ShutdownLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ShutdownLambda
      Handler: "com.jebbeich.shutdownlambda::handler"
      Runtime: java8
      MemorySize: 320
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
  WakeLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WakeLambda
      Handler: "com.jebbeich.wakedevinstance::handler"
      Runtime: java8
      MemorySize: 320
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:*
            - ssm:*
            - ec2messages:*
            - sns:*
            Resource: '*'

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  SleepStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "MachineStateQuery -> MachineStateChoice -> [ShutdownMessage -> Shutdown -> NotifyShutdown] OR [CanNotShutdownMessage -> NotifyCanNotShutdown]",
              "StartAt": "MachineStateQuery",
              "States": {

                "MachineStateQuery": {
                  "Type": "Task",
                  "Resource": "${machineStateLambdaArn}",
                  "Next": "MachineStateChoice"
                },

                "MachineStateChoice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.machine-state",
                      "StringEquals": "running-no-tmux",
                      "Next": "Shutdown"
                    },
                    {
                      "Variable": "$.machine-state",
                      "StringEquals": "machine-not-found",
                      "Next": "MachineNotFoundMessage"
                    },
                    {
                      "Variable": "$.machine-state",
                      "StringEquals": "not-running",
                      "Next": "MachineNotRunningMessage"
                    },
                    {
                      "Variable": "$.machine-state",
                      "StringEquals": "running-tmux-unknown",
                      "Next": "MachineTmuxUnknownMessage"
                    },
                    {
                      "Variable": "$.machine-state",
                      "StringEquals": "running-with-tmux",
                      "Next": "MachineRunningWithTmuxMessage"
                    }
                  ],
                  "Default": "MessageError"
                },
                "Shutdown": {
                  "Type": "Task",
                  "Resource": "${shutdownLambdaArn}",
                  "Next": "ShutdownMessage"
                },
                "ShutdownMessage": {
                  "Type": "Pass",
                  "Result": { "Message": "Dev instance was shut down" },
                  "Next": "Notify"
                },
                "MachineNotFoundMessage": {
                  "Type": "Pass",
                  "Result": { "Message": "Dev instance could not be found" },
                  "Next": "Notify"
                },
                "MachineNotRunningMessage": {
                  "Type": "Pass",
                  "Result": { "Message": "Dev instance not running" },
                  "Next": "Notify"
                },
                "MachineTmuxUnknownMessage": {
                  "Type": "Pass",
                  "Result": { "Message": "Dev instance not shutdown, tmux query failed or timed out" },
                  "Next": "Notify"
                },
                "MachineRunningWithTmuxMessage": {
                  "Type": "Pass",
                  "Result": { "Message": "Dev instance not shutdown, tmux running" },
                  "Next": "Notify"
                },
                "MessageError": {
                  "Type": "Pass",
                  "Result": { "Message": "Dev instance not shutdown, unknown error check logs" },
                  "Next": "Notify"
                },
                "Notify": {
                  "Type": "Task",
                  "Resource": "${notifyLambdaArn}",
                  "End": true
                }
              }
            }
          - { machineStateLambdaArn: !GetAtt [ MachineStateLambda, Arn ],
              notifyLambdaArn: !GetAtt [ NotifyLambda, Arn ],
              shutdownLambdaArn: !GetAtt [ ShutdownLambda, Arn ]}
